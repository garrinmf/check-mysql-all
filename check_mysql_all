#!/usr/bin/perl

################################################################################
# check_mysql_all - Nagios Plug-In for typical MySQL checks. 4.0+
#
# @author  Ryan Lowe <ryan.a.lowe@percona.com
# @date    2009-03-06
# @license GPL v2
################################################################################

use strict;
use warnings FATAL => 'all';
use Pod::Usage;
use Getopt::Long;
use English qw(-no_match_vars);
use DBI;
use lib "/usr/local/nagios/libexec";
use lib "/usr/lib64/nagios/plugins";
use utils qw(%ERRORS);

my $VERSION = '0.0.3';
my @CHECKS = qw(connect repl_io repl_sql repl_sbm repl_all 
                mysql_query connections table_status);
my @REPL_CHECKS = qw(repl_io repl_sql repl_sbm repl_all);
my %OPTIONS;
my %ARGS;

################################################################################
# Get configuration information
################################################################################

# Parse command line opts
my $gop=new Getopt::Long::Parser;
$gop->configure('no_ignore_case','bundling');
if (!$gop->getoptions(
    '<>'           => \&validate_check,
    'args|a=s%'    => \%ARGS,
    'critical|c=s' => \$OPTIONS{'critical'},
    'database|d=s' => \$OPTIONS{'database'},
    'help|h'       => \$OPTIONS{'help'    },
    'hostname|H=s' => \$OPTIONS{'host'    },
    'password|p=s' => \$OPTIONS{'password'},
    'port=s'       => \$OPTIONS{'port'    },
    'timeout=i'    => \$OPTIONS{'timeout' },
    'username|u=s' => \$OPTIONS{'user'    },
    'verbose|v+'   => \$OPTIONS{'verbose' },
    'version|V'    => \$OPTIONS{'version' },
    'warning|w=s'  => \$OPTIONS{'warning' } ) ) {

    pod2usage(2);
}

# Help if asked for or no check given
pod2usage(2) if     ($OPTIONS{'help'});
pod2usage(2) unless ($OPTIONS{'check'});

# Yay for versions
if ($OPTIONS{'version'}) {
    print "$VERSION\n";
    exit $ERRORS{'OK'};
}

# Set global defaults/validate options
$OPTIONS{'timeout'} = $OPTIONS{'timeout'} ? $OPTIONS{'timeout'} : 10;
$OPTIONS{'verbose'} = $OPTIONS{'verbose'} ? $OPTIONS{'verbose'} : 1;
validate_input(\%OPTIONS, 'timeout', 'seconds');

# Clean up args (remove leading/trailing space)
# 'foo = bar' becomes 'foo ' => ' bar' becomes 'foo' => 'bar'
%ARGS = map({$a=$ARGS{$_}; $a=~s/^\s+//g; s/\s+$//g; $_=>$a} keys(%ARGS));

################################################################################
# Begin the main program
################################################################################

# Set db defaults/validate options
$OPTIONS{'host'} = $OPTIONS{'host'} ? $OPTIONS{'host'} : 'localhost';
$OPTIONS{'port'} = $OPTIONS{'port'} ? $OPTIONS{'port'} : '3306';
validate_input(\%OPTIONS, 'host', 'hostname');
validate_input(\%OPTIONS, 'port', 'port');

# Attempt db connection
my $connection_string  = 'DBI:mysql:';
$connection_string    .= "host=$OPTIONS{'host'};";
$connection_string    .= "database=$OPTIONS{'database'};"
    if $OPTIONS{'database'};
$connection_string    .= "port=$OPTIONS{'port'};";
$connection_string    .= "mysql_multi_statements=1";
my $dbh;
eval {
    local $SIG{ALRM} = sub { die 'TIMEOUT' };
    alarm($OPTIONS{'timeout'});

    $dbh = DBI->connect ( 
        $connection_string,
        $OPTIONS{'user'},
        $OPTIONS{'password'},
        { RaiseError => 1, PrintError => 0 } 
    );
    alarm(0);
};
alarm(0);

# Check for timeout
if ( $@ ) {
    print "CRITICAL: Could not connect to MySQL";
    print " in $OPTIONS{'timeout'} seconds" if ($@ eq "TIMEOUT");
    print "\n";
    print $@ if ($OPTIONS{'verbose'} > 2);
    exit $ERRORS{'CRITICAL'};
}

################################################################################
# Begin check processing
################################################################################

my $check = $OPTIONS{'check'};

# Connect check
if ( $check eq 'connect' ) {
    $dbh->disconnect();
    print "OK: MySQL is accepting connections\n";
    exit $ERRORS{'OK'};
}

# Replication checks
if (grep {m|^$check$|} @REPL_CHECKS) {
    eval "check_$check(\$dbh, \\%OPTIONS, \\%ARGS, get_slave_status(\$dbh, \\%OPTIONS));";
} else {
    eval "check_$check(\$dbh, \\%OPTIONS, \\%ARGS, get_db_info(\$dbh, \\%OPTIONS));";
}

# Uh... shouldn't be here...
print "UNKNOWN: Check '$check' failed to execute\n";
print $@ if ($@ and $OPTIONS{'verbose'} > 2);
exit $ERRORS{'UNKNOWN'};

################################################################################
# Subroutines and helpers
################################################################################

# Validate check argument
sub validate_check {
    my $check = lc(shift);

    # Check for multiple checks
    if (exists($OPTIONS{'check'})) {
        print "UNKNOWN: Only one check can be executed at a time\n";
        exit $ERRORS{'UNKNOWN'};
    }

    # Verify valid check
    unless (grep {m|^$check$|} @CHECKS) { 
        print "UNKNOWN: Check $check is unrecognized\n";
        exit $ERRORS{'UNKNOWN'};
    }

    # I don't like playing with globals in a sub, but not much choice
    $OPTIONS{'check'} = $check;
}

# Validate user input
sub validate_input {
    my ($hash, $key, $type) = @_;

    # Percents - positive integers 0-100 optionally ending in '%'
    if ($type eq 'percent') {
        $hash->{$key} =~ s/\%$//;
        if ($hash->{$key} =~ /\D/) {
            print "UNKNOWN: '$key' should contain a positive integer (in percent)\n";
            exit $ERRORS{'UNKNOWN'};
        }
        unless ($hash->{$key} <= 100) {
            print "UNKNOWN: '$key' should be within 0-100%";
            exit $ERRORS{'UNKNOWN'};
        }

    # Seconds - positive intgers optionally ending in 's'
    } elsif ($type eq 'seconds') {
        $hash->{$key} =~ s/s$//;
        if ($hash->{$key} =~ /\D/) {
            print "UNKNOWN: '$key' should contain a positive integer (in seconds)\n";
            exit $ERRORS{'UNKNOWN'};
        }

    # Port - positive integers
    } elsif ($type eq 'port') {
        if ($hash->{$key} =~ /\D/) {
            print "UNKNOWN: '$key' should contain a TCP port\n";
            exit $ERRORS{'UNKNOWN'};
        }

    # Host - any string only containing \w, '-', '.'
    } elsif ($type eq 'hostname') {
        unless ($hash->{$key} =~ /^[\w\-\.]+$/) {
            print "UNKNOWN: '$key' should contain a valid hostname\n";
            exit $ERRORS{'UNKNOWN'};
        }

    # Uh oh...
    } else {
        print "UNKNOWN: Internal error, unable to verify '$key'\n";
        exit $ERRORS{'UNKNOWN'};
    }
}

# Return slave status info
sub get_slave_status {
    my ($dbh, $opts) = @_;

    my $r;
    eval {
        $r = $dbh->selectall_hashref('SHOW SLAVE STATUS', 1);
    };
    if ($@) {
        print "UNKNOWN: Unable to get slave status\n";
        print "Errno: $dbh->{'mysql_errno'}\n" if ($opts->{'verbose'} > 1);
        print "Error: $dbh->{'mysql_error'}\n" if ($opts->{'verbose'} > 2);
        print $@ if ($opts->{verbose} > 2);
        exit $ERRORS{'UNKNOWN'};
    }
 
    if (! %{$r}) {
        print "CRITICAL: Slave Not Configured\n";
        exit $ERRORS{'CRITICAL'};
    }

    return ( values(%{ $r }) )[0];
}

# Return db info
sub get_db_info {
    my ($dbh, $opts) = @_;

    my ($processlist, $variables, $status, $dbs);
    eval {
        $processlist = $dbh->selectall_hashref('SHOW FULL PROCESSLIST', 1);
        $variables   = $dbh->selectall_hashref('SHOW GLOBAL VARIABLES', 1);
        $status      = $dbh->selectall_hashref('SHOW /*!50002 GLOBAL */ STATUS', 1);
        $dbs         = $dbh->selectcol_arrayref("SHOW DATABASES");
    };
    if ($@) {
        print "UNKNOWN: Unable to get db info\n";
        print "Errno: $dbh->{'mysql_errno'}\n" if ($opts->{'verbose'} > 1);
        print "Error: $dbh->{'mysql_error'}\n" if ($opts->{'verbose'} > 2);
        print $@ if ($opts->{verbose} > 2);
        exit $ERRORS{'UNKNOWN'};
    }
 
    return ($processlist, $variables, $status, $dbs);
}

################################################################################
# Checks
################################################################################

# Check replication IO thread
sub check_repl_io {
    my ($dbh, $opts, $args, $repl_status) = @_;

    if (uc($repl_status->{'Slave_IO_Running'}) ne 'YES') {
        print "CRITICAL: IO_Thread Not Running\n";
        print "Last Errno: $repl_status->{'Last_Errno'}\n" if ($opts->{'verbose'} > 1);
        print "Last Error: $repl_status->{'Last_Error'}\n" if ($opts->{'verbose'} > 2);
        exit $ERRORS{'CRITICAL'};
    } 

    unless ($opts->{'check'} eq 'repl_all') {
        print "OK: IO_Thread Running\n";
        exit $ERRORS{'OK'};
    }
} 

# Check replication SQL thread
sub check_repl_sql {
    my ($dbh, $opts, $args, $repl_status) = @_;

    if (uc($repl_status->{'Slave_SQL_Running'}) ne 'YES') {
        print "CRITICAL: SQL_Thread Not Running\n";
        print "Last Errno: $repl_status->{'Last_Errno'}\n" if ($opts->{'verbose'} > 1);
        print "Last Error: $repl_status->{'Last_Error'}\n" if ($opts->{'verbose'} > 2);
        exit $ERRORS{'CRITICAL'};
    } 

    unless ($opts->{'check'} eq 'repl_all') {
        print "OK: SQL_Thread Running\n";
        exit $ERRORS{'OK'};
    }
} 

# Check replication seconds behind master
sub check_repl_sbm {
    my ($dbh, $opts, $args, $repl_status) = @_;

    $opts->{'warning'}  = $opts->{'warning'}  ? $opts->{'warning'}  : 30;
    $opts->{'critical'} = $opts->{'critical'} ? $opts->{'critical'} : 60;
    validate_input($opts, 'warning',  'seconds');
    validate_input($opts, 'critical', 'seconds');

    my $sbm = $repl_status->{'Seconds_Behind_Master'};

    if (! defined($sbm)) {
        print "CRITICAL: Seconds Behind Master is NULL\n";
        print "Last Errno: $repl_status->{'Last_Errno'}\n" if ($opts->{'verbose'} > 1);
        print "Last Error: $repl_status->{'Last_Error'}\n" if ($opts->{'verbose'} > 2);
        exit $ERRORS{'CRITICAL'};
    } elsif ($sbm >= $opts->{'critical'}) {
        print "CRITICAL: Slave is $sbm seconds behind master\n";
        exit $ERRORS{'CRITICAL'};
    } elsif ($sbm >= $opts->{'warning'}) {
        print "WARNING: Slave is $sbm seconds behind master\n";
        exit $ERRORS{'WARNING'};
    }

    unless ($opts->{'check'} eq 'repl_all') {
        print "OK: Slave is $sbm seconds behind master\n";
        exit $ERRORS{'OK'};
    }

    # Save sbm to options hash for repl_all (yes, it's a hack)
    $opts->{'sbm'} = $sbm;
}

# Run all replication checks
sub check_repl_all {
    my ($dbh, $opts, $args, $repl_status) = @_;

    check_repl_io(@_);
    check_repl_sql(@_);
    check_repl_sbm(@_);

    # Got this far, must be ok
    print "OK: IO and SQL Threads are running, slave is $opts->{'sbm'} seconds behind master\n";
    exit $ERRORS{'OK'};
}

# Mysql query check
sub check_mysql_query {
    my ($dbh, $opts, $args, $processlist, $variables, $status, $dbs) = @_;

    # Validate args
    if (!$args->{'query'}) {
        print "CRITICAL: No Query Provided\n";
        exit $ERRORS{'CRITICAL'};
    }
    $args->{'query_timeout'} = $args->{'query_timeout'} ? $args->{'query_timeout'} : 30;
    validate_input($args, 'query_timeout', 'seconds');

    # Attempt query
    eval { 
        local $SIG{ALRM} = sub { die 'TIMEOUT' };
        alarm($args->{'query_timeout'});

        my $r = $dbh->selectall_hashref($args->{'query'}, 1); 
        alarm(0);
    };
    alarm(0);

    if ($@) {
        print 'CRITICAL: Query did not complete successfully';
        print " in $args->{'query_timeout'} seconds" if ($@ eq 'TIMEOUT');
        print "\n";
        print "Errno: $dbh->{'mysql_errno'}\n" if ($opts->{'verbose'} > 1);
        print "Error: $dbh->{'mysql_error'}\n" if ($opts->{'verbose'} > 2);
        print $@ if ($opts->{verbose} > 2);
        exit $ERRORS{'CRITICAL'};
    }
    
    print "OK: Query Executed Successfully\n";
    exit $ERRORS{'OK'};
}

# Connection usage check
sub check_connections {
    my ($dbh, $opts, $args, $processlist, $variables, $status, $dbs) = @_;

    $opts->{'warning'}  = $opts->{'warning'}  ? $opts->{'warning'}  : 80;
    $opts->{'critical'} = $opts->{'critical'} ? $opts->{'critical'} : 90;
    validate_input($opts, 'warning',  'percent');
    validate_input($opts, 'critical', 'percent');

    my $processes = scalar keys %{$processlist};
    my $mc        = $variables->{'max_connections'}{'Value'};
    my $pcnt_used = int($processes*100/$mc + 0.5); # Round to nearest percent

    if ($pcnt_used >= $opts->{'critical'}) {
        print "CRITICAL: $processes/$mc ($pcnt_used\%) connections are used\n";
        exit $ERRORS{'CRITICAL'};
    } elsif ($pcnt_used >= $opts->{'warning'}) {
        print "WARNING: $processes/$mc ($pcnt_used\%) connections are used\n";
        exit $ERRORS{'WARNING'};
    }

    print "OK: $processes/$mc ($pcnt_used\%) connections are used\n";
    exit $ERRORS{'OK'};
}

# Table status check
sub check_table_status {
    my ($dbh, $opts, $args, $processlist, $variables, $status, $dbs) = @_;

    my @dbs = $opts->{'database'} ? ($opts->{'database'}) : @{ $dbs };
    my %tables_status;
    eval {
        for my $db (@$dbs) {
            $tables_status{$db} = $dbh->selectall_hashref("SHOW TABLE STATUS FROM \`$db\`", 1);
        }
    };
    if ($@) {
        print "UNKNOWN: Unable to get table status data\n";
        print "Errno: $dbh->{'mysql_errno'}\n" if ($opts->{'verbose'} > 1);
        print "Error: $dbh->{'mysql_error'}\n" if ($opts->{'verbose'} > 2);
        print $@ if ($opts->{verbose} > 2);
        exit $ERRORS{'UNKNOWN'};
    }

    my @errs;
    for my $db (sort(keys(%tables_status))) {
        for my $table (sort(keys(%{ $tables_status{$db} }))) {
            $_ = $tables_status{$db}{$table}{'Comment'};
            if (/marked as crashed/) {
                push(@errs, "$db.$table marked as crashed");
            } elsif (/(err(?:code|no):\s\d+)/i) {
                push(@errs, "$db.$table has an error ($1)");
            }
        }
    }

    if (@errs) {
        print 'CRITICAL: ', join(',', @errs), "\n";
        exit $ERRORS{'CRITICAL'};
    }

    print "OK: No errors found on any tables\n";
    exit $ERRORS{'OK'};
}
 
=pod

=head1 NAME

check_mysql_all - Nagios checks for 4.0+ versions of MySQL

=head1 SYNOPSIS

 check_mysql_all <check_name> [options]

 Options:
   --args|a     Optional arguments.  Comma-separated.  Check-specific.
   --critical|c The level at which a critical alarm is raised.  Check-specific.
   --database   The database to use
   --help|h     Display this message and exit
   --host|H     The target MySQL server host
   --password|p The password of the MySQL user
   --port       The port MySQL is listening on
   --username|u The MySQL user used to connect
   --verbose|v  Increase verbosity level
   --version|V  Display version information and exit
   --warning|w  The level at which a warning is raised.  Check-specific.

 Defaults are:

 ATTRIBUTE                  VALUE
 -------------------------- ------------------
 args                       No default value
 critical                   Check-specific
 database                   No default value
 help                       FALSE
 host                       localhost
 password                   No default value
 port                       3306
 timeout                    10 seconds
 username                   No default value
 verbose                    1 (out of 3)
 version                    FALSE
 warning                    Check-specific

 The following checks are supported:

 connect repl_io repl_sql repl_sbm repl_all mysql_query connections table_status

=head1 CHECKS

=over

=item B<connect>

Checks connectivity to the target database server.
Returns CRITICAL if not able to connect, OK otherwise.
    Permissions required: USAGE
    I<--args> => ignored
    I<--warning> => ignored
    I<--critical> => ignored

=item B<repl_io>

Checks whether on not the IO Replication thread is running.
Returns CRITICAL if not running, OK otherwise.
    Permissions required: REPLICATION CLIENT
    I<--args> => ignored
    I<--warning> => ignored
    I<--critical> => ignored

=item B<repl_sql>

Check to see whether or not the SQL Replication thread is running.
Returns CRITICAL if not running, OK otherwise.
    Permissions required: REPLICATION CLIENT
    I<--args> => ignored
    I<--warning> => ignored
    I<--critical> => ignored

=item B<repl_sbm>

Check how many seconds behind the master the slave is.
    Permissions required: REPLICATION CLIENT
    I<--args> => ignored
    I<--warning> => default 30 seconds
    I<--critical> => default 60 seconds

=item B<repl_all>

Combine repl_io, repl_sql, and repl_sbm checks into one.
Returns CRITICAL on failure of IO or SQL threads or if seconds behind master is 
greater than the limit.
Returns WARNING only if seconds behind master is greater than the limit.
    Permissions required: REPLICATION CLIENT
    I<--args> => ignored
    I<--warning> => default 30 seconds
    I<--critical> => default 60 seconds

=item B<mysql_query>

Run a given query, test if it executes properly.
Returns CRITICAL if the query fails to execute for whatever reason, OK 
otherwise.
    Permissions required: depends on the query
    I<--args> => no default, specify query with C<query=...> and optionally query timeout with C<query_timeout=...>
    I<--warning> => ignored
    I<--critical> => ignored

=item B<connections>

Test if the percentage of used connections is over a given threshold.
    Permissions required: PROCESS
    I<--args> => ignored
    I<--warning> => default 80%
    I<--critical> => default 90%

=item B<table_status>

Test all tables in a given database for errors, or all tables in all databases 
if I<--database> is not given.
    Permissions required: SELECT
    I<--args> => ignored
    I<--warning> => ignored
    I<--critical> => ignored

=back

=head1 SYSTEM REQUIREMENTS

check_mysql_all requires the following Perl modules:

  Pod::Usage
  Getopt::Long
  DBI
  DBD::mysql

=head1 BUGS

Please report all bugs and feature requests to 
http://code.google.com/p/check-mysql

=head1 LICENSE

This program is copyright (c) 2008 Ryan Lowe.
Feedback and improvements are welcome (rlowe@pablowe.net).

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, version 2; OR the Perl Artistic License.  On UNIX and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA  02111-1307 USA.

=head1 AUTHOR

Ryan Lowe (rlowe@pablowe.net)

=head1 VERSION

This manual page documents 0.0.3 of check_mysql_all

=cut

